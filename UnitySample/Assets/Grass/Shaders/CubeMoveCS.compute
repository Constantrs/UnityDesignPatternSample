// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

RWStructuredBuffer<float4x4> _MatricesBuffer;

int dimsX;
int dimsY;
float totalTime;
float3 centerOffset;

float3 calculatePostion(float3 id, float time)
{
    float t = time * 2;
    float x = id.x - dimsX * 0.5 + 0.5;
    float z = id.y - dimsY * 0.5 + 0.5;
    float y = sin(sqrt(x * x + z * z) * 0.4 - t);
    return float3(x,y,z);
}

[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID,
             uint groupIndex : SV_GroupIndex)
{
    // TODO: insert actual code here!

     float3 position = calculatePostion(id, totalTime);
     position += centerOffset;
     uint index = id.x + id.y * dimsX;

     //float4x4 mat = _MatricesBuffer[index];
     //mat[1].w = position.y;
     float4x4 mat = float4x4(float4(1, 0, 0,  position.x), float4(0, 1, 0,  position.y), float4(0, 0, 1,  position.z), float4(0, 0, 0, 1));
     _MatricesBuffer[index] = mat;
}
